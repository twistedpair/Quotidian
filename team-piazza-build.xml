<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2011 Nat Pryce, Timo Meinen.
  ~
  ~ This file is part of Team Piazza.
  ~
  ~ Team Piazza is free software; you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation; either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ Team Piazza is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->
<project name="team-piazza" default="all">

  <property file="build.properties" />
  <property name="skip.tests" value="true" />

  <!-- Compiler options -->

  <property name="compiler.debug" value="on" />
  <property name="compiler.generate.no.warnings" value="off" />
  <property name="compiler.args" value="" />
  <property name="compiler.max.memory" value="128m" />
  <patternset id="ignored.files">
    <exclude name="**/CVS/**" />
    <exclude name="**/SCCS/**" />
    <exclude name="**/RCS/**" />
    <exclude name="**/rcs/**" />
    <exclude name="**/.DS_Store/**" />
    <exclude name="**/.svn/**" />
    <exclude name="**/.pyc/**" />
    <exclude name="**/.pyo/**" />
    <exclude name="**/*.pyc/**" />
    <exclude name="**/*.pyo/**" />
    <exclude name="**/.git/**" />
    <exclude name="**/*.hprof/**" />
    <exclude name="**/_svn/**" />
    <exclude name="**/.hg/**" />
    <exclude name="**/*.lib/**" />
    <exclude name="**/*~/**" />
    <exclude name="**/__pycache__/**" />
    <exclude name="**/.bundle/**" />
  </patternset>
  <patternset id="library.patterns">
    <include name="*.zip" />
    <include name="*.war" />
    <include name="*.egg" />
    <include name="*.ear" />
    <include name="*.swc" />
    <include name="*.jar" />
  </patternset>
  <patternset id="compiler.resources">
    <include name="**/?*.properties" />
    <include name="**/?*.xml" />
    <include name="**/?*.gif" />
    <include name="**/?*.png" />
    <include name="**/?*.jpeg" />
    <include name="**/?*.jpg" />
    <include name="**/?*.html" />
    <include name="**/?*.dtd" />
    <include name="**/?*.tld" />
    <include name="**/?*.jsp" />
    <include name="**/?*.css" />
    <include name="**/?*.html" />
    <include name="**/?*.htm" />
    <include name="**/?*.ftl" />
    <include name="**/?*.ftl" />
  </patternset>

  <!-- Project Libraries -->

  <path id="library.teamcity.classpath">
    <pathelement location="${path.variable.teamcitydistribution}/devPackage/agent-api.jar" />
    <pathelement location="${path.variable.teamcitydistribution}/devPackage/common-api.jar" />
    <pathelement location="${path.variable.teamcitydistribution}/devPackage/runtime/runtime-util.jar" />
    <pathelement location="${path.variable.teamcitydistribution}/devPackage/server-api.jar" />
    <pathelement location="${path.variable.teamcitydistribution}/lib/servlet-api.jar" />
    <pathelement location="${path.variable.teamcitydistribution}/webapps/ROOT/WEB-INF/lib/jdom.jar" />
    <pathelement location="${path.variable.teamcitydistribution}/webapps/ROOT/WEB-INF/lib/spring-webmvc.jar" />
    <pathelement location="${path.variable.teamcitydistribution}/webapps/ROOT/WEB-INF/lib/spring.jar" />
  </path>

  <!-- Global Libraries -->

  <path id="library.intellij_idea.classpath">
    <pathelement location="${idea.home}/lib/annotations.jar" />
    <pathelement location="${idea.home}/lib/util.jar" />
  </path>

  <!-- Application Server Libraries -->

  <!-- Modules -->

  <!-- Module team-piazza -->

  <dirname property="module.team-piazza.basedir" file="${ant.file}" />

  <property name="compiler.args.team-piazza" value="${compiler.args}" />

  <property name="team-piazza.output.dir" value="${module.team-piazza.basedir}/out/production/team-piazza" />
  <property name="team-piazza.testoutput.dir" value="${module.team-piazza.basedir}/out/test/team-piazza" />

  <path id="team-piazza.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="team-piazza.module.production.classpath">
    <path refid="library.teamcity.classpath" />
    <path refid="library.intellij_idea.classpath" />
  </path>

  <path id="team-piazza.runtime.production.module.classpath">
    <pathelement location="${team-piazza.output.dir}" />
    <path refid="library.teamcity.classpath" />
    <path refid="library.intellij_idea.classpath" />
  </path>

  <path id="team-piazza.module.classpath">
    <pathelement location="${team-piazza.output.dir}" />
    <path refid="library.teamcity.classpath" />
    <pathelement location="${basedir}/lib/mockito-all-1.8.5.jar" />
    <pathelement location="${basedir}/lib/junit-4.10.jar" />
    <path refid="library.intellij_idea.classpath" />
  </path>

  <path id="team-piazza.runtime.module.classpath">
    <pathelement location="${team-piazza.testoutput.dir}" />
    <pathelement location="${team-piazza.output.dir}" />
    <path refid="library.teamcity.classpath" />
    <pathelement location="${basedir}/lib/mockito-all-1.8.5.jar" />
    <pathelement location="${basedir}/lib/junit-4.10.jar" />
    <path refid="library.intellij_idea.classpath" />
  </path>

  <patternset id="excluded.from.module.team-piazza">
    <patternset refid="ignored.files" />
  </patternset>

  <patternset id="excluded.from.compilation.team-piazza">
    <patternset refid="excluded.from.module.team-piazza" />
  </patternset>

  <path id="team-piazza.module.sourcepath">
    <dirset dir="${module.team-piazza.basedir}">
      <include name="src" />
      <include name="resources" />
    </dirset>
  </path>

  <path id="team-piazza.module.test.sourcepath">
    <dirset dir="${module.team-piazza.basedir}">
      <include name="tests" />
    </dirset>
  </path>

  <target name="compile.module.team-piazza" depends="compile.module.team-piazza.production,compile.module.team-piazza.tests" description="Compile module team-piazza" />

  <target name="compile.module.team-piazza.production" description="Compile module team-piazza; production classes">
    <mkdir dir="${team-piazza.output.dir}" />
    <javac destdir="${team-piazza.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.team-piazza}" />
      <bootclasspath refid="team-piazza.module.bootclasspath" />
      <classpath refid="team-piazza.module.production.classpath" />
      <src refid="team-piazza.module.sourcepath" />
      <patternset refid="excluded.from.compilation.team-piazza" />
    </javac>

    <copy todir="${team-piazza.output.dir}">
      <fileset dir="${module.team-piazza.basedir}/src">
        <patternset refid="compiler.resources" />
        <type type="file" />
      </fileset>
      <fileset dir="${module.team-piazza.basedir}/resources">
        <patternset refid="compiler.resources" />
        <type type="file" />
      </fileset>
    </copy>
  </target>

  <target name="compile.module.team-piazza.tests" depends="compile.module.team-piazza.production" description="compile module team-piazza; test classes" unless="skip.tests">
    <mkdir dir="${team-piazza.testoutput.dir}" />
    <javac destdir="${team-piazza.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.team-piazza}" />
      <bootclasspath refid="team-piazza.module.bootclasspath" />
      <classpath refid="team-piazza.module.classpath" />
      <src refid="team-piazza.module.test.sourcepath" />
      <patternset refid="excluded.from.compilation.team-piazza" />
    </javac>

    <copy todir="${team-piazza.testoutput.dir}">
      <fileset dir="${module.team-piazza.basedir}/tests">
        <patternset refid="compiler.resources" />
        <type type="file" />
      </fileset>
    </copy>
  </target>

  <target name="clean.module.team-piazza" description="cleanup module">
    <delete dir="${team-piazza.output.dir}" />
    <delete dir="${team-piazza.testoutput.dir}" />
  </target>

  <target name="init" description="Build initialization">
    <!-- Perform any build initialization in this target -->
  </target>

  <target name="clean" depends="clean.module.team-piazza" description="cleanup all" />

  <target name="build.modules" depends="init, clean, compile.module.team-piazza" description="build all modules" />

  <target name="all" depends="build.modules" description="build all" />
</project>